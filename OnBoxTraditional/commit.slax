version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
import "../import/junos.xsl";
match configuration {
/*

version: 1.1
date: 8 August 2014
*/

    /*
    - We are making sure that the loopback interface configuration is present
    - and it has family inet configured.
    - The commit will fail if this is the case.
    - 
    - Uncomment the line with 'v6-enable' if you have/want to cover IPv6 too.
     */
    call error-if-missing($must = interfaces/interface[name == "lo0"]/unit[name == "0"]/family/inet/address, $statement = "interfaces lo0 unit 0 family inet address");

	
    /*
    - Now we check the present loopback interface configuration and make sure it's not disabled.
    - The commit will fail if this is the case.
     */
    call error-if-present($must = interfaces/interface[name == "lo0"]/disable | interfaces/interface[name == "lo0"]/unit[name == "0"]/disable) {
        with $message = {
            expr "The Loopback interface is disabled.";
         }
    }
}
    
/*
- This is where we can generate custom error/warning messages
- by modifying the default templates.
 */
template warn-if-missing ($must, $statement = "unknown", $message = "missing mandatory configuration statement") {
 
    if (not($must)) {
        <xnm:warning> {
            <edit-path> {
                copy-of $statement;
            }
            <message> {
                copy-of $message;
            }
        }
    }
}
/*                  
-
-
-
 */
template error-if-missing ($must, $statement = "unknown", $message = "missing mandatory configuration statement") {
 
    if (not($must)) {
        <xnm:error> {
            <edit-path> {
                copy-of $statement;
            }
            <message> {
                copy-of $message;
            }
        }
    }
}
/*
-
-
-
 */
template error-if-present ($must = 1, $message = "invalid configuration statement") {
    /* give error if param missing */
 
    for-each ($must) {
        <xnm:error> {
            call jcs:edit-path();
            call jcs:statement();
            <message> {
                copy-of $message;
            }
        }
    }
}
